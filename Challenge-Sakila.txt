USE sakila;

-- 1.	List all actors.
SELECT first_name, last_name FROM actor;

-- 2.	Find the surname of the actor with the forename 'John'.
SELECT first_name, last_name FROM actor WHERE first_name = 'John' ORDER BY first_name, last_name;

-- 3.	Find all actors with surname 'Neeson'.
SELECT last_name, first_name FROM actor WHERE last_name = 'Neeson' ORDER BY last_name, first_name;

-- 4.	Find all actors with ID numbers divisible by 10.
SELECT actor_id, last_name, first_name FROM actor WHERE (actor_id/10);

-- 5.	What is the description of the movie with an ID of 100?
SELECT film_id, description FROM film WHERE film_id = '100' ORDER BY film_id, description;

-- 6.	Find every R-rated movie.
SELECT title, rating FROM film WHERE rating = 'R'ORDER BY title, rating;

-- 7.	Find every non-R-rated movie.
SELECT title, rating FROM film WHERE (rating NOT LIKE 'R') ORDER BY title, rating;

-- 8.	Find the ten shortest movies.
SELECT title, length FROM film 
	ORDER BY length, title LIMIT 10;

-- 9.	Find the movies with the longest runtime, without using LIMIT.
SELECT title, length FROM film 
	ORDER BY length DESC;
	
-- 10.	Find all movies that have deleted scenes.
SELECT title, special_features FROM film WHERE special_features = 'Deleted Scenes';

-- 11.	Using HAVING, reverse-alphabetically list the last names that are not repeated.
SELECT last_name FROM actor 
	GROUP BY last_name
    HAVING COUNT(last_name)=1
    ORDER BY last_name DESC;
	
-- 12.	Using HAVING, list the last names that appear more than once, from highest to lowest frequency.
SELECT last_name, COUNT(last_name) AS freq FROM actor
	GROUP BY last_name
    HAVING COUNT(last_name) > 1
    ORDER BY (SELECT COUNT(last_name) FROM actor ORDER BY COUNT(last_name)) DESC;

-- 13.	Which actor has appeared in the most films?
SELECT CONCAT(actor.first_name,"", actor.last_name) AS full_name,
COUNT(film.film_ID) AS film_starred FROM film
JOIN film_actor ON film.film_id = film_actor.actor_id
JOIN actor ON film_actor.actor_id = actor.actor_id
GROUP BY full_name
HAVING full_name IS NOT NULL
ORDER BY film_starred DESC LIMIT 10;

-- 14.	When is 'Academy Dinosaur' due?
SELECT * FROM rental
LEFT JOIN customer ON rental.customer_id = customer.customer_id
LEFT JOIN inventory ON rental.inventory_id = inventory.inventory_id
LEFT JOIN film ON inventory.film_id = film.film_id WHERE film.title = 'Academy Dinosaur' AND return_date IS NULL;

-- 15.	What is the average runtime of all films?
SELECT AVG(length) FROM film;

-- 16.	List the average runtime for every film category.
SELECT category.name, AVG(length)
FROM film JOIN film_category USING (film_id) 
JOIN category USING (category_id)
GROUP BY category.name
ORDER BY AVG(length) DESC;

-- 17.	List all movies featuring a robot.
SELECT * FROM film WHERE description LIKE '%robot%';

-- 18.	How many movies were released in 2010?
SELECT release_year, COUNT(title) FROM film WHERE release_year = '2010';

-- 19.	Find the titles of all the horror movies.
SELECT film.title, category.name FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id WHERE category.name = 'Horror';

-- 20.	List the full name of the staff member with the ID of 2.alter
SELECT staff_id, first_name, last_name FROM staff WHERE staff_id = '2';

-- 21.	List all the movies that Fred Costner has appeared in.
SELECT actor.first_name, actor.last_name, film.title FROM film
JOIN film_actor ON film.film_ID = film_actor.film_id
JOIN actor ON film_actor.actor_id = actor.actor_id 
WHERE first_name = 'Fred' AND last_name = 'Costner';
    
-- 22.	How many distinct countries are there?
SELECT COUNT(DISTINCT country) AS countries FROM country;

-- 23.	List the name of every language in reverse-alphabetical order.
SELECT name FROM language
ORDER BY name ASC;

-- 24.	List the full names of every actor whose surname ends with '-son' in alphabetical order by their forename.
SELECT first_name, last_name
	FROM actor
	WHERE last_name LIKE '%son%'
	ORDER BY first_name, last_name ASC;

-- 25.	Which category contains the most films?
SELECT category.name, COUNT(title)
	FROM film JOIN film_category USING (film_id) 
	JOIN category USING (category_id)
	GROUP BY category.name
	ORDER BY COUNT(title) DESC;
